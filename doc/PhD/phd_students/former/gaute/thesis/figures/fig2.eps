%!PS-Adobe-2.0 EPSF-2.0
%%Title: contour1.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3d
%%CreationDate: Fri Nov 21 17:29:38 2003
%%For: hagen@dhcp5.fi.uib.no (gaute hagen)
%%BoundingBox: 0 0 525 273
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 273 moveto 0 0 lineto 525 0 lineto 525 273 lineto closepath clip newpath
-70.7 307.3 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
15.000 slw
% Ellipse
n 5400 2400 75 75 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 355.00 155.00]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 6300 3300 75 75 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 415.00 215.00]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 6900 3600 75 75 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 455.00 235.00]  PATmp PATsp ef gr PATusp gs col0 s gr

7.500 slw
% Ellipse
n 4425 3300 75 75 0 360 DrawEllipse gs col7 1.00 shd ef gr gs col0 s gr

% Ellipse
n 3825 3600 75 75 0 360 DrawEllipse gs col7 1.00 shd ef gr gs col0 s gr

% Ellipse
n 5400 3675 75 75 0 360 DrawEllipse gs col7 1.00 shd ef gr gs col0 s gr

% Polyline
15.000 slw
gs  clippath
5460 585 m 5340 585 l 5340 872 l 5400 632 l 5460 872 l cp
eoclip
n 5400 5100 m
 5400 600 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 360.00 40.00]  PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 5460 872 m 5400 632 l 5340 872 l 5460 872 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
9915 3060 m 9915 2940 l 9628 2940 l 9868 3000 l 9628 3060 l cp
eoclip
n 1200 3000 m
 9900 3000 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 80.00 200.00]  PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
n 9628 3060 m 9868 3000 l 9628 2940 l 9628 3060 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 5400 3000 m
 7800 4800 l gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
 [90] 0 sd
n 5400 3000 m
 3000 1200 l gs col0 s gr  [] 0 sd
% Polyline
gs  clippath
6576 3957 m 6648 3861 l 6418 3689 l 6574 3881 l 6346 3785 l cp
eoclip
n 5400 3000 m
 6600 3900 l gs col0 s gr gr

% arrowhead
n 6346 3785 m 6574 3881 l 6418 3689 l 6346 3785 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
8460 2985 m 8340 2985 l 8340 3272 l 8400 3032 l 8460 3272 l cp
eoclip
n 8400 3300 m
 8400 3000 l gs col0 s gr gr

% arrowhead
n 8460 3272 m 8400 3032 l 8340 3272 l 8460 3272 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
gs  clippath
8370 3015 m 8430 3015 l 8430 2863 l 8400 2983 l 8370 2863 l cp
eoclip
n 8400 2700 m
 8400 3000 l gs col0 s gr gr

% arrowhead
n 8370 2863 m 8400 2983 l 8430 2863 l  col0 s
% Polyline
2 slj
15.000 slw
n 7800 4800 m 7802 4797 l 7805 4792 l 7812 4782 l 7822 4767 l 7835 4747 l
 7850 4722 l 7868 4695 l 7887 4665 l 7907 4634 l 7926 4604 l
 7945 4574 l 7963 4546 l 7980 4519 l 7995 4494 l 8009 4470 l
 8022 4448 l 8034 4427 l 8045 4407 l 8056 4388 l 8065 4369 l
 8075 4350 l 8085 4329 l 8095 4308 l 8105 4287 l 8115 4265 l
 8124 4243 l 8134 4220 l 8143 4197 l 8153 4173 l 8162 4149 l
 8172 4125 l 8181 4101 l 8189 4077 l 8198 4053 l 8206 4030 l
 8214 4007 l 8222 3985 l 8229 3963 l 8236 3942 l 8243 3921 l
 8250 3900 l 8257 3879 l 8264 3858 l 8271 3837 l 8278 3815 l
 8285 3793 l 8293 3770 l 8300 3747 l 8307 3723 l 8314 3699 l
 8322 3675 l 8328 3651 l 8335 3627 l 8341 3603 l 8347 3580 l
 8353 3557 l 8358 3535 l 8363 3513 l 8367 3492 l 8371 3471 l
 8375 3450 l 8378 3429 l 8381 3408 l 8384 3387 l 8386 3365 l
 8388 3341 l 8390 3316 l 8392 3289 l 8393 3260 l 8395 3229 l
 8396 3196 l 8397 3162 l 8398 3129 l 8398 3097 l 8399 3067 l
 8399 3043 l 8400 3024 l 8400 3011 l 8400 3003 l
 8400 3000 l gs col0 s gr 
% Polyline
 [90] 0 sd
n 3000 1200 m 2998 1203 l 2995 1208 l 2988 1218 l 2978 1234 l 2965 1254 l
 2949 1278 l 2931 1306 l 2911 1336 l 2891 1367 l 2871 1398 l
 2852 1429 l 2834 1458 l 2816 1485 l 2800 1511 l 2786 1535 l
 2772 1558 l 2759 1580 l 2746 1601 l 2735 1622 l 2724 1642 l
 2713 1663 l 2702 1683 l 2691 1704 l 2680 1725 l 2669 1747 l
 2658 1769 l 2647 1792 l 2636 1815 l 2625 1840 l 2614 1864 l
 2603 1889 l 2593 1914 l 2582 1939 l 2572 1965 l 2562 1990 l
 2553 2014 l 2544 2039 l 2536 2062 l 2528 2086 l 2520 2109 l
 2513 2131 l 2506 2153 l 2500 2175 l 2494 2197 l 2488 2219 l
 2482 2241 l 2477 2264 l 2471 2287 l 2466 2311 l 2461 2335 l
 2456 2359 l 2451 2383 l 2447 2408 l 2443 2432 l 2439 2456 l
 2435 2480 l 2431 2503 l 2428 2526 l 2425 2548 l 2423 2569 l
 2420 2589 l 2418 2608 l 2416 2627 l 2414 2645 l 2413 2663 l
 2411 2683 l 2409 2704 l 2408 2724 l 2406 2744 l 2405 2766 l
 2404 2788 l 2404 2812 l 2403 2837 l 2402 2863 l 2402 2889 l
 2401 2916 l 2401 2940 l 2400 2962 l 2400 2978 l 2400 2990 l
 2400 2997 l
 2400 3000 l gs col0 s gr  [] 0 sd
/Times-Roman ff 300.00 scf sf
5700 900 m
gs 1 -1 sc (Im k) col0 sh gr
/Times-Roman ff 300.00 scf sf
9300 2700 m
gs 1 -1 sc (Re k) col0 sh gr
/Times-Bold ff 300.00 scf sf
6000 4200 m
gs 1 -1 sc (L1) col0 sh gr
/Times-Bold ff 300.00 scf sf
8400 4200 m
gs 1 -1 sc (L2) col0 sh gr
/Times-Roman ff 210.00 scf sf
8100 3000 m
gs 1 -1 sc (     ) col0 sh gr
/Times-Roman ff 210.00 scf sf
8400 2700 m
gs 1 -1 sc (max) col0 sh gr
/Times-Roman ff 330.00 scf sf
8100 2700 m
gs 1 -1 sc ( k) col0 sh gr
/Times-Roman ff 300.00 scf sf
4200 3750 m
gs 1 -1 sc (C) col0 sh gr
/Times-Roman ff 300.00 scf sf
6675 3300 m
gs 1 -1 sc (D) col0 sh gr
/Times-Roman ff 300.00 scf sf
5025 3825 m
gs 1 -1 sc (A) col0 sh gr
/Times-Roman ff 300.00 scf sf
5625 2475 m
gs 1 -1 sc (B) col0 sh gr
$F2psEnd
rs
end
