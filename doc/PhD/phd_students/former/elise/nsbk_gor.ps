%!PS-Adobe-2.0
%%Creator: dvips(k) 5.82 Copyright 1998 Radical Eye Software
%%Title: polgor.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Helvetica
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips polgor
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2000.11.23:1921
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IE 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IE N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IE 256 array N 2 string 0 1 255{IE S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For copying restrictions, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For copying restrictions, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro
%!
% PostScript prologue for pst-coil.tex.
% Version 97 patch 1, 98/06/02
% For copying restrictions, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { /t ED t sin AspectSin mul t 180 div AspectCos mul add t cos
lineto } def
/Coil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /ArmB ED /ArmA ED
/h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED x0 y0 translate y1 y0 sub x1 x0
sub 2 copy Pyth /TotalLength ED Atan rotate /BeginAngle ArmA AspectCos
Div w h mul Div 360 mul def /EndAngle TotalLength ArmB sub AspectCos Div
w h mul Div 360 mul def 1 0 0 0 ArrowA ArmA 0 lineto /mtrx CM def w h
mul 2 Div w 2 Div scale BeginAngle Inc EndAngle { CoilLoop } for
EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
TotalLength 0 ArrowB lineto
pop pop pop pop } def
% DG/SR modification end
/AltCoil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /h ED /w ED
/EndAngle ED /BeginAngle ED /mtrx CM def w h mul 2 Div w 2 Div scale
BeginAngle sin AspectSin mul BeginAngle 180 div AspectCos mul add
BeginAngle cos /lineto load stopped { moveto } if BeginAngle Inc
EndAngle { CoilLoop } for EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { /ArmB ED /ArmA ED 2 div /w ED w mul /h ED /y1 ED /x1 ED /y0 ED
/x0 ED x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth /TotalLength ED
Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
sub 2 div dup ArmA add /ArmA ED ArmB add /ArmB ED /x ArmB h 2 div add
def mark 0 0 ArmB 0 n { x w /w w neg def /x x h add def } repeat
TotalLength ArmA sub 0 TotalLength 0 } def
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro
%!
% PostScript prologue for pst-grad.tex.
% Version 97, 93/05/12
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.
%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).
%
% Syntax:
%   R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill

/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBlue ED
  /LastGreen ED
  /LastRed ED
  /FirstBlue ED
  /FirstGreen ED
  /FirstRed ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastRed FirstRed add 2 div
  LastGreen FirstGreen add 2 div
  LastBlue FirstBlue add 2 div
  setrgbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
    MidLine { GradientLoop } repeat
  } if
  MidLine NumLines lt
  {
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoop } repeat
  } if
} def
/GradientLoop {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Red Green Blue setrgbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Blue Blue BlueIncrement add def
  /Green Green GreenIncrement add def
  /Red Red RedIncrement add def
} def

end
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro
%!
% PostScript header file pst-text.pro
% Version 97, 94/04/20
% For copying restrictions, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc
{
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow
{ /String exch def
  /CharCount 0 def
  String length
  { String CharCount 1 getinterval ShowChar
    /CharCount CharCount 1 add def
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar
{ /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
    currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def

end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "22 June 1996",
%   filename = "8r.enc",
%   email = "kb@@mail.tug.org",
%   address = "135 Center Hill Rd. // Plymouth, MA 02360",
%   codetable = "ISO/ASCII",
%   checksum = "119     662    4424",
%   docstring = "Encoding for TrueType or Type 1 fonts to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (polgor.dvi)
@start
%DVIPSBitmapFont: Fa cmsy10 20.74 1
/Fa 1 1 df<007FBFFCA2C01280A36C1E00A2690772AE86>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr17 20.74 1
/Fb 1 44 df<180F4E7EB3B3AE007FBF12C0C012E0A46C1EC0CBD81F80CBFCB3B3AE72CC
FC6B6C78E07C>43 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi12 20.74 1
/Fc 1 108 df<16FE0207B5FC49B6FC495CA4D900015BEC003FA35EA2157FA25EA315FF
5EA35C5EA35C5EA35C93CBFCA35C5DA3141F5DA3143F5DF10FF8F17FFE027F4BB5FC4B4A
148095390FF80FC095391FC003E002FF92387F001F4B02FCEB7FF04D4813FF943803E001
49ED07C04B49485AEF1F00173E494B15E04B5B4C4815C04C481580494A486D13004B4848
EB007C4CCAFC163E495C4A5B4B5A4B5A011F495A4A485A033FCBFC157E90383FFDFCECFF
F05D15FC49EBFFC016FC16FFDAF07F13C001FF010F13F0DAE0017F6F6C7E707E48ED0FFF
4A6D7F828448815C848248F1078091C8FCA24C150F484D14005BA262001F191E494A5B1A
3E1A3C123F496E157C1A781AF8007F61491701705D190300FF047F495A4970485A053F49
C7FC94381FF07E496FB45A496F5B6CC900015B003E9338007FC04C7A77F758>107
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmsy10 14.4 2
/Fd 2 122 df<147FECFF804913C015E05BA35BA215C0A25B1580A215005BA25CA2495A
A3495AA25CA213FF5CA25C5AA25CA24890C7FCA25BA212075BA2485AA35B121F5BA3485A
A25BA2127F90C8FCA212FEA3127C12081B3D7DC121>48 D<147814FC497EAB6D5AA81478
A8003FEC03F0D87FF0EB3FF8B712FCA43A7FF0783FF8D83F00EB03F0C790C7FCA514FCA6
497EB3AE6D5AB11478AD266E79D335>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmbx12 14.4 1
/Fe 1 49 df<913803FFC0023F13FC91B6FC010315C0010F018113F0903A1FFC003FF849
486D7E49486D7E49486D7E48496D138048496D13C0A24817E04890C813F0A34817F8A248
17FC49157FA3007F17FEA600FF17FFB3A5007F17FEA6003F17FCA26D15FFA26C17F8A36C
17F0A26C6D4913E0A26C6D4913C06C17806E5B6C6D4913006D6C495AD91FFCEB3FF8903A
0FFF81FFF06D90B55A01011580D9003F01FCC7FC020313C0384F7BCD43>48
D E
%EndDVIPSBitmapFont
/Ff 157[96 96 35[101 17[101 1[57 57 40[{TeXBase1Encoding ReEncodeFont}6
172.188 /Helvetica rf
%DVIPSBitmapFont: Fg cmbx12 20.74 6
/Fg 6 85 df<BFFCA41E80A4C7003F0280C71207F2003F1B071B01756C13C01C1F888888
A28888A2F57FE0A21D3FA41D1FA21EF0A21D0FA6F507F8A49AC7FCB3B3B3AEBBFCA86575
7AF474>0 D<F21FE0507E507E507EA24F7FA24F7FA24F80A24F804F80A24F80A24F80A2
96B67EA24E814E81A24E8219FDDE0FF98119F84E486C80A24E486C80067F824F7EDEFF80
81864D010081864D486D80A24D486D81050F844E7F4D4883874D4883874D486E80A24D48
6E804C8595C87E4C4884874C486F81A24C486F81041F864D82043F864D824C4885884C48
7080A24B90CA6C804B874C830307884C834B4887884B487280A24B487280037F884C8403
FF884C844A90CC81894A487380A24A487381020F8A4B854A48898A4A48898A4A487480A2
4A487480498B92CE7E49488A8A49488B8A49487581A249487680013F8C91C1FC498CA290
C27EA2488DA2488D482280A24822C0A24822E0A24822F0A24822F8C412FCA26C22F88E79
77F8A1>I<007FC0FCC1FCA32080A37E6C4ACA12076FEF000F6C6F17006C6F181F6C0A07
14C06C6F180170727E6C6F856C6F856D886D6E85826D6F846D6F7213E07F6D6F8471197F
6D816D816E1C3F6E8071F11FF06E816E81806E6F180F846E816E816F1CF86F6E1807846F
816F6F94C7FC816F81856F816F8182708085708170818270818670817081837180A2715C
715C715C715C62715C7191CCFC725A725A4E5AF0FFE04D5B4D5B050F90CDFC4D48F007F8
4D5A4D5A4D5A4C49F00FF04C5B4C5B4C90CCFCDC1FFC191F4C5A4C5A4B485A4B49193F4B
491AE04B90CD127F4B5A4B5A4B481AFF4B48614A5B4A0180614A90CDFCDA1FFE5013C04A
48624A48624A486249496249494FB5FC494919074990CD121F494897B6FCD93FF8070F15
804948060FB7FC90C0FC12035A5A5A5A5AC11200A37E757675F58C>6
D<BF12FCA48AA4C7003F0280C8123F1B01F3003F1C07767F1C008989898989A2891F8089
A289A31E7FA21FC0A21E3FA3F20FF0A3F61FE0A49BC7FCA21A1FA31A3FA21A7FA21AFF19
03190F197F94B7FCA8943880007F190F190319001A7FA21A3FA21A1FA31A0FA997CBFCB3
A9BBFCA86B757AF47A>70 D<96267FFFE01670063FB6ED01F80503B700F01403053F04FC
14074CB96C130F040706E0131F043F72133F93BA00FC137F0303DC00076D13FF030F03C0
9039003FFF814B02FCC8000713C3037F02E0030113F792B600806F6CB5FC02034ACA121F
4A02F8834A02E0834A4A1701027F4A8391B548CC7E494A85495C4C854988494A85494A85
495C8A4991CDFC90B54886A2484A1B7FA2481E3F5D481E1F5D5A1F0FA2485CA3481E075D
A2795A489BC9FCA45DA2B6FCB27EA26F0403BA12C0A47EA3816C96C8000302F8C7FCA36C
80A36C80A27E817E817E817F6D80827F6D806D806D80826D6E606D806E80021F6E5F6E02
F05F6E806E02FE5F0200DAFFC05E6F02F04BB6FC031F02FE030713CF6FDAFFE0021F1387
03039226FF8003B51201030093B6EAFC00043F4E133F040706E0131F04014E1307DC003F
4CC71201050304F8EC0070DD003F038092C8FCDE007F01F0CCFC827A75F798>I<001FC0
12F8A7481FFC03F0C76C91C7120F92C8EF007F02F81B1F02E01B0702801B0191C984491D
7F491D3F491D1FA2491D0FA2491D07007F1FFEA2491D03A4491D01A700FF1FFF90CA85A6
CB1A00B3B3B3AD4ABC12C0A8787479F387>84 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop -425 -444 a
 1. 1. 0. 0. setcmykcolor
 -425 -444 a -189 -207 a
 0. setgray
 -189 -207
a -189 -207 a
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 -189 -207 a -189 -207 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 -189 -207 a -189
-207 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave grestore
 grestore end
 -189 -207 a -189 -207 a
 tx@Dict begin tx@NodeDict begin {-22.76208 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 -189 -207 a -189 -207
a
 tx@Dict begin tx@NodeDict begin {22.76208 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 -189 -207 a -189 -207 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
/ArrowAc [ 6 2 roll ] cvx def ArrowAc BeginArrow 1.  1.  scale true
0. 1.2 0.0 1.9 Arrow  EndArrow  moveto } def /ArrowB { /ArrowBc [ 6
2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale false 0. 1.2 0.0
1.9 Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowAc
ArrowA pop pop ArrowBc ArrowB pop pop pop pop grestore  grestore end
 -189 -207 a -189 -207 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -189
-207 a -189 -207 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 18.33954 14.22995
0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 -189 -207 a -265 -148 a Fg(G)-189
-207 y
 tx@Dict begin PutEnd  end
 -189 -207 a -189 -207 a
 tx@Dict begin PutEnd  end
 -189 -207 a 233 -174 a
Ff(=)756 -207 y
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 756 -207 a 756 -207 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 756 -207 a 756
-207 a
 tx@Dict begin gsave STV newpath 1.70717 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 756 -207 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 1.4 0.0 3.5 Arrow
 EndArrow  } def [ 5.69052 0.0 -28.4526 0.0  /Lineto /lineto load def
false Line  gsave 0.84 setgray fill grestore gsave 1.70717 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
-189 -207 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -189 -207 a -189 -207 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 26.93953 14.22995
3.111 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 -189 -207 a -301
-161 a Fg(G)-149 -135 y Fe(0)-189 -207 y
 tx@Dict begin PutEnd  end
 -189 -207 a
-189 -207 a
 tx@Dict begin PutEnd  end
 -189 -207 a 1131 -164 a Ff(+)1606 -207 y
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end

1606 -207 a 1606 -207 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 1606 -207 a 1606 -207 a
 tx@Dict begin gsave STV newpath 1.70717 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 1606
-207 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 1.4 0.0 3.5 Arrow
 EndArrow  } def [ 5.69052 0.0 -28.4526 0.0  /Lineto /lineto load def
false Line  gsave 0.84 setgray fill grestore gsave 1.70717 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 2315 -207
a
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 2315 -207 a 2315 -207 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 2315 -207 a 2315 -207 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave grestore
 grestore end
 2315
-207 a 2315 -207 a
 tx@Dict begin tx@NodeDict begin {-22.76208 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 2315 -207 a 2315 -207 a
 tx@Dict begin tx@NodeDict begin {22.76208 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 2315 -207
a 2315 -207 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
/ArrowAc [ 6 2 roll ] cvx def ArrowAc BeginArrow 1.  1.  scale true
0. 1.2 0.0 1.9 Arrow  EndArrow  moveto } def /ArrowB { /ArrowBc [ 6
2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale false 0. 1.2 0.0
1.9 Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowAc
ArrowA pop pop ArrowBc ArrowB pop pop pop pop grestore  grestore end
 2315 -207 a -354 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  0.0 0.0 14.2263
0 CLW mul sub 0 360 arc closepath gsave 0.16 0. 0.16 0. setcmykcolor
fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial 1891 -148 a Fg(\006)2666 -164 y Ff(+)3118
-207 y
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 3118 -207 a 3118 -207 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 3118 -207 a 3118 -207
a
 tx@Dict begin gsave STV newpath 1.70717 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 3118 -207 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 1.4 0.0 3.5 Arrow
 EndArrow  } def [ 5.69052 0.0 -28.4526 0.0  /Lineto /lineto load def
false Line  gsave 0.84 setgray fill grestore gsave 1.70717 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
3827 -207 a
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 3827 -207 a 3827 -207 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 3827 -207 a 3827
-207 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave grestore
 grestore end
 3827 -207 a 3827 -207 a
 tx@Dict begin tx@NodeDict begin {-22.76208 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 3827 -207 a 3827 -207
a
 tx@Dict begin tx@NodeDict begin {22.76208 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 3827 -207 a 3827 -207 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
/ArrowAc [ 6 2 roll ] cvx def ArrowAc BeginArrow 1.  1.  scale false
0. 1.2 0.0 1.9 Arrow  EndArrow  moveto } def /ArrowB { /ArrowBc [ 6
2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale false 0. 1.2 0.0
1.9 Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowAc
ArrowA pop pop ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3827 -207 a -355 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  0.0 0.0 14.2263
0 CLW mul sub 0 360 arc closepath gsave 0. 0.16 0.16 0. setcmykcolor
fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 3391 -148 a Fg(\001)-189 194
y
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 -189 194 a -189 194 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 -189 194 a -189 194 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave grestore
 grestore end
 -189 194
a -189 194 a
 tx@Dict begin tx@NodeDict begin {-22.76208 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 -189 194 a -189 194 a
 tx@Dict begin tx@NodeDict begin {22.76208 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 -189 194 a -189 194
a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
/ArrowAc [ 6 2 roll ] cvx def ArrowAc BeginArrow 1.  1.  scale false
0. 1.2 0.0 1.9 Arrow  EndArrow  moveto } def /ArrowB { /ArrowBc [ 6
2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale false 0. 1.2 0.0
1.9 Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowAc
ArrowA pop pop ArrowBc ArrowB pop pop pop pop grestore  grestore end
 -189 194 a -189 194 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -189 194 a -189 194 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 21.56683 17.52637
0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 -189 194
a -279 267 a Fg(F)-157 204 y Fd(y)-189 194 y
 tx@Dict begin PutEnd  end
 -189 194
a -189 194 a
 tx@Dict begin PutEnd  end
 -189 194 a 233 228 a Ff(=)1606 194 y
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 1606
194 a 1606 194 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 1606 194 a 1606 194 a
 tx@Dict begin gsave STV newpath 1.70717 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 1606 194 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 1.4 0.0 3.5 Arrow
 EndArrow  } def [ -5.69052 0.0 28.4526 0.0  /Lineto /lineto load def
false Line  gsave 0.84 setgray fill grestore gsave 1.70717 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 2315 194 a
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 2315 194 a 2315 194
a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 2315 194 a 2315 194 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave grestore
 grestore end
 2315 194 a 2315 194 a
 tx@Dict begin tx@NodeDict begin {-22.76208 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 2315 194
a 2315 194 a
 tx@Dict begin tx@NodeDict begin {22.76208 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 2315 194 a 2315 194 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
/ArrowAc [ 6 2 roll ] cvx def ArrowAc BeginArrow 1.  1.  scale false
0. 1.2 0.0 1.9 Arrow  EndArrow  moveto } def /ArrowB { /ArrowBc [ 6
2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale false 0. 1.2 0.0
1.9 Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowAc
ArrowA pop pop ArrowBc ArrowB pop pop pop pop grestore  grestore end
 2315 194 a -354 w
@beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  0.0 0.0 14.2263
0 CLW mul sub 0 360 arc closepath gsave 0.16 0. 0.16 0. setcmykcolor
fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 1891 253 a Fg(\006)2666
237 y Ff(+)3118 194 y
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 3118 194 a 3118 194 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 3118 194
a 3118 194 a
 tx@Dict begin gsave STV newpath 1.70717 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 3118 194 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 1.4 0.0 3.5 Arrow
 EndArrow  } def [ -5.69052 0.0 28.4526 0.0  /Lineto /lineto load def
false Line  gsave 0.84 setgray fill grestore gsave 1.70717 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
3827 194 a
 tx@Dict begin tx@NodeDict begin {-28.4526 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 3827 194 a 3827 194 a
 tx@Dict begin tx@NodeDict begin {28.4526 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 3827 194 a 3827 194
a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave grestore
 grestore end
 3827 194 a 3827 194 a
 tx@Dict begin tx@NodeDict begin {-22.76208 0.0 } false /N@@@A 10 {InitPnode
} NewNode end end
 3827 194 a 3827 194 a
 tx@Dict begin tx@NodeDict begin {22.76208 0.0 } false /N@@@B 10 {InitPnode
} NewNode end end
 3827 194
a 3827 194 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
/ArrowAc [ 6 2 roll ] cvx def ArrowAc BeginArrow 1.  1.  scale true
0. 1.2 0.0 1.9 Arrow  EndArrow  moveto } def /ArrowB { /ArrowBc [ 6
2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale false 0. 1.2 0.0
1.9 Arrow  EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 0.84
setgray fill grestore gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowAc
ArrowA pop pop ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3827 194 a -355 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  0.0 0.0 14.2263
0 CLW mul sub 0 360 arc closepath gsave 0. 0.16 0.16 0. setcmykcolor
fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial 3391 253 a Fg(\001)4194 26 y Ff(\(a\))-189
-207 y
 1. 1. 0. 0. setcmykcolor
 -189 -207 a -189 1218 a
 0. setgray
 -189 1218 a 354 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale true 0.6 1.4 0.0 3.5 Arrow  EndArrow  moveto } def /ArrowB
{ } def [ -14.2263 0.0 -34.14313 0.0  /Lineto /lineto load def false
Line  gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.6 1.4 0.0 3.5 Arrow
 EndArrow  } def [ 34.14313 0.0 14.2263 0.0  /Lineto /lineto load def
false Line  gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  0.0 0.0 14.2263
0 CLW mul sub 0 360 arc closepath gsave 0.16 0. 0.16 0. setcmykcolor
fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 95 1277 a Fg(\006)-94
1171 y Fc(k)337 b(k)588 1252 y Ff(=)1110 1218 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale true 0.6 1.4 0.0 3.5 Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.6 1.4 0.0 3.5 Arrow  EndArrow  }
def [ 34.14313 0.0 -34.14313 0.0  /Lineto /lineto load def false Line
 gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1110 1218 a
 tx@Dict begin tx@NodeDict begin {-22.76208 38.98006 } false /N@@@A
10 {InitPnode } NewNode end end
 1110 1218 a 1110
1218 a
 tx@Dict begin tx@NodeDict begin {22.76208 38.98006 } false /N@@@B
10 {InitPnode } NewNode end end
 1110 1218 a 1110 1218 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 4.78008
SLW 0. setgray 0 setlinecap stroke  grestore gsave 1.36574 SLW 1. setgray
stroke grestore gsave grestore  grestore end
 1110 1218 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  0. true -14.2263
0.0 14.2263 39.83365 0 Frame  gsave 0.84 setgray fill grestore gsave
1.70717 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1043 1112 a Fg(T)1110 1218 y
@beginspecial @setspecial
 tx@Dict begin STP newpath 4.78008 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 22.76208 38.98006 34.14313 42.67891 0.0 65.441
-34.14313 42.67891 -22.76208 38.98006  1. 0.1 0.  /c ED /b ED /a ED
false OpenCurve  gsave 4.78008 SLW 0. setgray 0 setlinecap stroke 
grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave grestore
end
 
@endspecial 1110 1218 a
 tx@Dict begin tx@NodeDict begin {-21.33945 59.46593 } false /N@@@A
10 {InitPnode } NewNode end end
 1110
1218 a 1110 1218 a
 tx@Dict begin tx@NodeDict begin {-25.60735 57.18974 } false /N@@@B
10 {InitPnode } NewNode end end
 1110 1218 a 1110 1218 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow
1.  1.  scale false 0. 1.2 0.0 1.9 Arrow  EndArrow  } def /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC
{ NCLine  } if end gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowBc
ArrowB pop pop pop pop grestore  grestore end
 1110 1218
a 1110 1218 a
 tx@Dict begin tx@NodeDict begin {19.91682 60.60405 } false /N@@@A
10 {InitPnode } NewNode end end
 1110 1218 a 1110 1218 a
 tx@Dict begin tx@NodeDict begin {18.49419 61.45764 } false /N@@@B
10 {InitPnode } NewNode end end
 1110 1218 a 1110
1218 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow
1.  1.  scale false 0. 1.2 0.0 1.9 Arrow  EndArrow  } def /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC
{ NCLine  } if end gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowBc
ArrowB pop pop pop pop grestore  grestore end
 1110 1218 a 1045 616 a Fc(k)1139 553 y Fd(0)2386
1053 y @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale true 0.6 1.4 0.0 3.5 Arrow  EndArrow  moveto } def /ArrowB
{ } def [ 0.0 14.2263 0.0 34.14313  /Lineto /lineto load def false
Line  gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale true 0.6 1.4 0.0 3.5 Arrow  EndArrow  moveto } def /ArrowB
{ } def [ 0.0 -14.2263 0.0 -34.14313  /Lineto /lineto load def false
Line  gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  0.0 0.0 14.2263
0 CLW mul sub 0 360 arc closepath gsave 0. 0.16 0.16 0. setcmykcolor
fill grestore gsave 1.70717 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
2305 1112 a Fg(\001)2121 895 y Fb(+)p Fc(k)2111 1318
y Fa(\000)p Fc(k)2666 1086 y Ff(=)3142 1218 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale true 0.6 1.4 0.0 3.5 Arrow  EndArrow  moveto } def /ArrowB
{ } def [ -14.2263 0.0 -25.60735 0.0 -25.60735 -14.2263  /r 5.69052
def /Lineto { Arcto } def false Line  gsave 1.70717 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale true 0.6 1.4 0.0 3.5 Arrow  EndArrow  moveto } def /ArrowB
{ } def [ -14.2263 39.83365 -25.60735 39.83365 -25.60735 54.05995 
/r 5.69052 def /Lineto { Arcto } def false Line  gsave 1.70717 SLW
0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 1.70717 SLW 0. setgray  0. true -14.2263
0.0 14.2263 39.83365 0 Frame  gsave 0.84 setgray fill grestore gsave
1.70717 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 3084 1112 a Fg(\000)3142
1218 y
 tx@Dict begin tx@NodeDict begin {15.07988 1.42262 } false /N@@@A 10
{InitPnode } NewNode end end
 3142 1218 a 3142 1218 a
 tx@Dict begin tx@NodeDict begin {28.4526 1.42262 } false /N@@@B 10
{InitPnode } NewNode end end
 3142 1218 a 3142 1218
a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 4.78008
SLW 0. setgray 0 setlinecap stroke  grestore gsave 1.36574 SLW 1. setgray
stroke grestore gsave grestore  grestore end
 3142 1218 a 3142 1218 a
 tx@Dict begin tx@NodeDict begin {15.07988 38.41101 } false /N@@@A
10 {InitPnode } NewNode end end
 3142 1218 a 3142 1218 a
 tx@Dict begin tx@NodeDict begin {28.4526 38.41101 } false /N@@@B 10
{InitPnode } NewNode end end
 3142
1218 a 3142 1218 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0
neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCLine  } if end gsave 4.78008
SLW 0. setgray 0 setlinecap stroke  grestore gsave 1.36574 SLW 1. setgray
stroke grestore gsave grestore  grestore end
 3142 1218 a @beginspecial @setspecial
 tx@Dict begin STP newpath 4.78008 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 28.4526 1.42262 42.67891 5.69052 48.36943 19.91682
42.67891 34.14313 28.4526 38.41101  1. 0.1 0.  /c ED /b ED /a ED false
OpenCurve  gsave 4.78008 SLW 0. setgray 0 setlinecap stroke  grestore
gsave 1.36574 SLW 1. setgray stroke grestore gsave grestore end


@endspecial 3142 1218 a
 tx@Dict begin tx@NodeDict begin {25.60735 1.42262 } false /N@@@A 10
{InitPnode } NewNode end end
 3142 1218 a 3142 1218 a
 tx@Dict begin tx@NodeDict begin {28.4526 1.42262 } false /N@@@B 10
{InitPnode } NewNode end end
 3142
1218 a 3142 1218 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow
1.  1.  scale false 0. 1.2 0.0 1.9 Arrow  EndArrow  } def /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC
{ NCLine  } if end gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowBc
ArrowB pop pop pop pop grestore  grestore end
 3142 1218 a 3142 1218 a
 tx@Dict begin tx@NodeDict begin {25.60735 38.41101 } false /N@@@A
10 {InitPnode } NewNode end end
 3142 1218
a 3142 1218 a
 tx@Dict begin tx@NodeDict begin {28.4526 38.41101 } false /N@@@B 10
{InitPnode } NewNode end end
 3142 1218 a 3142 1218 a
 tx@Dict begin gsave STV newpath 4.78008 SLW 0. setgray  /ArrowA {
moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow
1.  1.  scale false 0. 1.2 0.0 1.9 Arrow  EndArrow  } def /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC
{ NCLine  } if end gsave 4.78008 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 1.36574 SLW 1. setgray stroke grestore gsave ArrowBc
ArrowB pop pop pop pop grestore  grestore end
 3142 1218 a 3591
1117 a Fc(k)3685 1055 y Fd(0)4194 1121 y Ff(\(b\))-189
1218 y
 1. 1. 0. 0. setcmykcolor
 -189 1218 a eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
