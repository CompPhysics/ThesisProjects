\chapter{Introduction}

Mathematical modelling is the tool preferred by scientists and engineers for describing the behaviour of physical systems. Often, the more degrees of freedom a model includes, the more likely it is that its predictive power improves. In turn, increasing the number of variables in the model reduces the probability to find analytical solutions of the resulting equations, and  numerical methods making use of computer simulations become essential.\\
\\
In quantum mechanics, the \emph{non-relativistic Schr\"odinger equation} plays the role of \emph{Newton's laws of motion} in classical mechanics. It can model a vast quantity of physical systems of interest both in science and technology. The lack of analytical solutions justify the use of computational methods. Because of the number of degrees of freedom involved, the use of grid-based numerical methods are not suitable for this kind of problem. Presently, Monte Carlo methods  belong to so-called \emph{ab initio} methods able to solve, in principle exactly, systems with many interacting particles.\\
\\
A challenge that computational physicists may face is the ability to combine powerful numerical methods with efficient use of computational resources and programming techniques. This is what precisely has motivated the formulation of this thesis. The fact that in the recent years many scientists and engineers have migrated to slower interpreted high level languages like Matlab, because of the abundant disponibility of documentation, clear and compact syntaxis, interactive execution of commands and the integration of simulation and visualizations have made interpreted languages highly attractive.\\
\\
Successfull attempts to integrate high and low level languages in simulators solving partial differential equations (PDEs) have been done in the recent years. Examples of mixed codes are the Python/C++ libraries Dolphin\cite{LoggWells:2009, www:fenics}, GETFEM++, etc, for solving PDEs by the finite element methods. To the author's knowledge, there are not many cases making use of this programming approach for quantum mechanical problems. An exception is PyQuante\cite{Muller2009} doing the Hartree-Fock method and Density Functional theory for quantum chemistry. There seems to be a gap in the development of plain high level and mixed codes for quantum Monte Carlo techniques.\\
\\
In this context, this thesis examines three ways of implementing a Quantum Variational Monte Carlo (QVMC) simulator. The  first two consider the potential use of Python and Python/C++ (mixed languages) in computing the ground state energy using a straigthforward algorithm. Benchmarks of both implementations and profiles of the pure Python code are provided and a discussion on the advantages and disadvantages is carried out. A third alternative shows how to exploit the object oriented capabilities of C++ to develop robust, efficient, flexible and a user friendly implementation for QVMC. \\
\\
When constructing many-electron wave functions for QVMC simulations, the picture of a trial wave function expressed as the product of a Slater determinant times a correlation function provides an easy way to include many of the physical features of quantum mechanical systems. A problem with the Slater matrix is that it is computationally demanding. Algorithms for treating this problem, besides optimizing the Jastrow factor, have already been suggested.\\
\\
However, a question pending is the reduction of the computational time and accuracy in  computing the derivatives of the variational energy with respect to the variational parameters. On the one hand, analytical evaluations of this expression are practical only for very small systems. On the other hand, the use of finite difference methods to approximate the gradients and laplacians of the energy, besides introducing inaccuracies associated to the step size, is computationally expensive.\\
\\
In this thesis we suggest a methodological proposal for the development of scientific code. In particular, we show how to take advantages of the characteristics of high level programming languages in order to prototype big implementations.  The analysis of the performance of plain Python against C++ have been carried out. We also develop an optimized C++ code (about 8000 lines) capable of computing the ground state energy (in serie or in parallel) of several quantum mechanical systems using the Quantum Variational Monte Carlo method. Among the physical systems implemented are the Helium and Beryllium atoms, the harmonic oscillator and two-dimensional quantum dots for two and six electrons. It should be rather simple to simulate other systems because of the generic form of the code.\\
\\
To the author's knowledge, we have developed a novel algorithm for computing analytically the derivatives of the variational energy with respect to the variational parameters. Its main peculiarity is that despite of being simple in terms of code development it is also accurate and computationally efficient. This constitutes one of the main contributions of this thesis.\\
\\
In order to provide a clear description of the QVMC algorithm, most of the central equations required have been derived in details from scratch. Moreover, a complete documentation of the implementation can be found in the CD provided with this thesis. We hope that part of these material can be used as pedagogical support for other students in computational physics.\\
\\
In all the systems considered yields the non-relativistic Schr\"odinger equation. Moreover, all evaluations of the ground state energy are carried out within the closed shell model. The system studied include the Helium and Beryllium atoms, non-interacting electrons trapped in an harmonic oscillator potential as well as quantum dots in two dimensions where electrons are then repealing each other when trapped in the same harmonic oscillator potential. Extensions of the last case to three dimensions should be straigthforward, since the general implementation of the code.\\  
\\
The rest of this thesis is organised as follows. Chapter \ref{QM} gives an introduction to the many body problem in quantum mechanics. Further, a general description of the numerical method (variational Monte Carlo) is given in chapter \ref{QMC}. Because of the crucial role the trial wave functions plays in variational Monte Carlo (and other Monte Carlo methods), chapter \ref{TWF} is dedicated to this topic, focusing on the algorithms that improve the computational performance. Then, a detailed description concerning the software design and implementation is discussed in chapter \ref{implementation}. The cases of study, including analytical derivations to validate the code are discussed in chapter (). Finally, chapters (\ref{Results}) and (\ref{Conclusions}) deals with the computational experiments and conclusions, respectively. 


\clearemptydoublepage

