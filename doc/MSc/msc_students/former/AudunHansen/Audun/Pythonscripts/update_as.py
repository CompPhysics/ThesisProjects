# -*- coding: utf-8 -*-
#updating the t3 tensor
#autogenerated code
from numpy import *
from matplotlib.pyplot import *
from itertools import *


def set_to_zero(o):
    tx = "    N%s_%s%s%s%s%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    N%s%s_%s%s%s%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    N%s%s%s_%s%s%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    N%s%s%s%s_%s%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    N%s%s%s%s%s_%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])

    #tx +="    N%s_%s%s%s%s%s = 0;\n" %(o[3], o[4], o[5], o[0], o[1], o[2])
    #tx +="    N%s%s_%s%s%s%s = 0;\n" %(o[3], o[4], o[5], o[0], o[1], o[2])
    #tx +="    N%s%s%s_%s%s%s = 0;\n" %(o[3], o[4], o[5], o[0], o[1], o[2])
    #tx +="    N%s%s%s%s_%s%s = 0;\n" %(o[3], o[4], o[5], o[0], o[1], o[2])
    #tx +="    N%s%s%s%s%s_%s = 0;\n" %(o[3], o[4], o[5], o[0], o[1], o[2])
    return tx

def hupdate_as_5_1(o):
    #header 5-1 & 1-5
    tx =  "    void update_as_%s%s%s%s%s_%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu);\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx +=  "    void update_as_%s_%s%s%s%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu);\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    
    tx +=  "    sp_mat %s%s%s%s%s_%s();\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx +=  "    sp_mat %s_%s%s%s%s%s();\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    return tx

def hupdate_as_4_2(o):
    tx = "    void update_as_%s%s%s%s_%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu);\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx += "    void update_as_%s%s_%s%s%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu);\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    
    tx += "    sp_mat %s%s%s%s_%s%s();\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx += "    sp_mat %s%s_%s%s%s%s();\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    return tx
    
def hupdate_as_3_3(o):
    tx = "    void update_as_%s%s%s_%s%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu);\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx += "    sp_mat %s%s%s_%s%s%s();\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    
    #tx += "    void update_as_%s%s%s_%s%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu);\n" %(o[4],o[5],o[0],o[1],o[2],o[3])
    return tx


def update_as_5_1(o):
    #cpp 5-1 & 1-5
    tx =  "void flexmat6::update_as_%s%s%s%s%s_%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu){\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx += "    iNp = Np;\n"
    tx += "    iNq = Nq;\n"
    tx += "    iNr = Nr;\n"
    tx += "    iNs = Ns;\n"
    tx += "    iNt = Nt;\n"
    tx += "    iNu = Nu;\n"
    tx += "    unpack_sp_mat H(spC);\n"
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT0/(iN%s*iN%s*iN%s*iN%s)));\n" % (o[4],   o[0],o[1],o[2],o[3])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s*iN%s*iN%s*iN%s)/(iN%s*iN%s*iN%s)));\n"% (o[3],   o[4],   o[0],o[1],o[2],o[3],   o[0],o[1],o[2] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s*iN%s)/(iN%s*iN%s)));\n"% (o[2],   o[3],   o[0],o[1],o[2],    o[4],   o[0],o[1],o[2],o[3],   o[0],o[1])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s*iN%s)/(iN%s)));\n"% (o[1],     o[2],   o[0],o[1],      o[3],   o[0],o[1],o[2],    o[4],   o[0],o[1],o[2],o[3],   o[0])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s*iN%s)));\n"% (o[0], o[1],o[0],     o[2],   o[0],o[1],      o[3],   o[0],o[1],o[2],    o[4],   o[0],o[1],o[2],o[3])
    tx += "    v%s = conv_to<uvec>::from(H.vT1);\n" % o[5]
    tx += "    vValues = H.vVals; \n"
    tx += "    deinit();\n"
    tx += "}\n\n"
    
    
    
    tx +=  "void flexmat6::update_as_%s_%s%s%s%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu){\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx += "    iNp = Np;\n"
    tx += "    iNq = Nq;\n"
    tx += "    iNr = Nr;\n"
    tx += "    iNs = Ns;\n"
    tx += "    iNt = Nt;\n"
    tx += "    iNu = Nu;\n"
    p,q,r,s,t,u = o[0],o[1],o[2],o[3],o[4],o[5]
    on = [q,r,s,t,u,p]
    tx += "    unpack_sp_mat H(spC);\n"
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT1/(iN%s*iN%s*iN%s*iN%s)));\n" % (on[4],   on[0],on[1],on[2],on[3])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s*iN%s*iN%s)/(iN%s*iN%s*iN%s)));\n"% (on[3],   on[4],   on[0],on[1],on[2],on[3],   on[0],on[1],on[2] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s*iN%s)/(iN%s*iN%s)));\n"% (on[2],   on[3],   on[0],on[1],on[2],    on[4],   on[0],on[1],on[2],on[3],   on[0],on[1])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s*iN%s)/(iN%s)));\n"% (on[1],     on[2],   on[0],on[1],      on[3],   on[0],on[1],on[2],    on[4],   on[0],on[1],on[2],on[3],   on[0])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s*iN%s)));\n"% (on[0], on[1],on[0],     on[2],   on[0],on[1],      on[3],   on[0],on[1],on[2],    on[4],   on[0],on[1],on[2],on[3])
    tx += "    v%s = conv_to<uvec>::from(H.vT0);\n" % on[5]
    tx += "    vValues = H.vVals; \n"
    tx += "    deinit();\n"
    tx += "}\n\n"
    return tx


def update_as_4_2(o):
    #cpp 4-2 & 2-4
    tx =  "void flexmat6::update_as_%s%s%s%s_%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu){\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx += "    iNp = Np;\n"
    tx += "    iNq = Nq;\n"
    tx += "    iNr = Nr;\n"
    tx += "    iNs = Ns;\n"
    tx += "    iNt = Nt;\n"
    tx += "    iNu = Nu;\n"
    tx += "    unpack_sp_mat H(spC);\n"
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT0/(iN%s*iN%s*iN%s)));\n" % (o[3],   o[0],o[1],o[2])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s*iN%s*iN%s)/(iN%s*iN%s)));\n"% (o[2],   o[3],   o[0],o[1],o[2],   o[0],o[1] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s)/(iN%s)));\n"% (o[1],   o[2],   o[0],o[1],    o[3],   o[0],o[1],o[2],   o[0])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s)));\n"% (o[0],     o[1],   o[0],      o[2],   o[0],o[1],    o[3],   o[0],o[1],o[2])
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT1/(iN%s)));\n" % (o[5],   o[4])
    tx += "    v%s = conv_to<uvec>::from(H.vT1 - v%s*iN%s );\n" % (o[4],  o[5],   o[4])
    tx += "    vValues = H.vVals; \n"
    tx += "    deinit();\n"
    tx += "}\n\n"
    
    
    tx += "void flexmat6::update_as_%s%s_%s%s%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu){\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx += "    iNp = Np;\n"
    tx += "    iNq = Nq;\n"
    tx += "    iNr = Nr;\n"
    tx += "    iNs = Ns;\n"
    tx += "    iNt = Nt;\n"
    tx += "    iNu = Nu;\n"
    tx += "    unpack_sp_mat H(spC);\n"
    p,q,r,s,t,u = o[0],o[1],o[2],o[3],o[4],o[5]
    on = [r,s,t,u,p,q]
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT0/(iN%s)));\n" % (on[5],   on[4])
    tx += "    v%s = conv_to<uvec>::from(H.vT0 - v%s*iN%s );\n" % (on[4],  on[5],   on[4])
    
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT1/(iN%s*iN%s*iN%s)));\n" % (on[3],   on[0],on[1],on[2]) #u = 
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s*iN%s)/(iN%s*iN%s)));\n"% (on[2],   on[3],   on[0],on[1],on[2],   on[0],on[1] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s)/(iN%s)));\n"% (on[1],   on[2],   on[0],on[1],    on[3],   on[0],on[1],on[2],   on[0])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s)));\n"% (on[0],     on[1],   on[0],      on[2],   on[0],on[1],    on[3],   on[0],on[1],on[2])

    tx += "    vValues = H.vVals; \n"
    tx += "    deinit();\n"
    tx += "}\n\n"
    
    #cpp 4-2 & 2-4
    """
    tx += "void flexmat6::update_as_%s%s%s%s_%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu){\n" %(o[3],o[4],o[5],o[0],o[1],o[2])
    tx += "    iNp = Np;\n"
    tx += "    iNq = Nq;\n"
    tx += "    iNr = Nr;\n"
    tx += "    iNs = Ns;\n"
    tx += "    iNt = Nt;\n"
    tx += "    iNu = Nu;\n"
    tx += "    unpack_sp_mat H(spC);\n"
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT1/(iN%s*iN%s*iN%s)));\n" % (o[3],   o[0],o[1],o[2])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s*iN%s)/(iN%s*iN%s)));\n"% (o[2],   o[3],   o[0],o[1],o[2],   o[0],o[1] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s)/(iN%s)));\n"% (o[1],   o[2],   o[0],o[1],    o[3],   o[0],o[1],o[2],   o[0])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s - v%s*iN%s*iN%s - v%s*iN%s*iN%s*iN%s)));\n"% (o[0],     o[1],   o[0],      o[2],   o[0],o[1],    o[3],   o[0],o[1],o[2])
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT0/(iN%s)));\n" % (o[5],   o[4])
    tx += "    v%s = conv_to<uvec>::from(H.vT0 - v%s*iN%s );\n" % (o[4],  o[5],   o[4])
    tx += "    vValues = H.vVals; \n"
    tx += "    deinit();\n"
    tx += "}\n\n"
    
    """
    return tx

    


def update_as_3_3(o):
    tx =  "void flexmat6::update_as_%s%s%s_%s%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu){\n" %(o[0],o[1],o[2],o[3],o[4],o[5])
    tx += "    iNp = Np;\n"
    tx += "    iNq = Nq;\n"
    tx += "    iNr = Nr;\n"
    tx += "    iNs = Ns;\n"
    tx += "    iNt = Nt;\n"
    tx += "    iNu = Nu;\n"
    tx += "    unpack_sp_mat H(spC);\n"
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT0/(iN%s*iN%s)));\n" % (o[2],   o[0],o[1])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s*iN%s)/(iN%s)));\n"% (o[1],   o[2],   o[0],o[1],   o[0] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s - v%s*iN%s*iN%s)));\n"% (o[0],   o[1],   o[0],    o[2],   o[0],o[1])
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT1/(iN%s*iN%s)));\n" % (o[5],   o[3],o[4])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s)/(iN%s)));\n"% (o[4],   o[5],   o[3],o[4],   o[3] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s - v%s*iN%s*iN%s)));\n"% (o[3],   o[4],   o[3],    o[5],   o[3],o[4])
    tx += "    vValues = H.vVals; \n"
    tx += "    deinit();\n"
    tx += "}\n\n"
    
    """
    tx += "void flexmat6::update_as_%s%s%s_%s%s%s(sp_mat spC, int Np, int Nq, int Nr, int Ns, int Nt, int Nu){\n" %(o[3],o[4],o[5],o[0],o[1],o[2])
    tx += "    iNp = Np;\n"
    tx += "    iNq = Nq;\n"
    tx += "    iNr = Nr;\n"
    tx += "    iNs = Ns;\n"
    tx += "    iNt = Nt;\n"
    tx += "    iNu = Nu;\n"
    tx += "    unpack_sp_mat H(spC);\n"
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT1/(iN%s*iN%s)));\n" % (o[2],   o[0],o[1])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s*iN%s)/(iN%s)));\n"% (o[1],   o[2],   o[0],o[1],   o[0] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT1 - v%s*iN%s - v%s*iN%s*iN%s)));\n"% (o[0],   o[1],   o[0],    o[2],   o[0],o[1])
    tx += "    v%s = conv_to<uvec>::from(floor( H.vT0/(iN%s*iN%s)));\n" % (o[5],   o[3],o[4])
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s*iN%s)/(iN%s)));\n"% (o[4],   o[5],   o[3],o[4],   o[3] )
    tx += "    v%s = conv_to<uvec>::from(floor((H.vT0 - v%s*iN%s - v%s*iN%s*iN%s)));\n"% (o[3],   o[4],   o[3],    o[5],   o[3],o[4])
    tx += "    vValues = H.vVals; \n"
    tx += "    deinit();\n"
    tx += "}\n\n"
    """
    
    return tx

def return_as_3_3(o):
    tx = "sp_mat flexmat6::%s%s%s_%s%s%s(){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    if(N%s%s%s_%s%s%s == 0){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        locations.set_size(vp.size(), 2);\n"
    tx +="        locations.col(0) = v%s + v%s*iN%s + v%s*iN%s*iN%s;\n" % (o[0], o[1], o[0], o[2], o[1], o[0])
    tx +="        locations.col(1) = v%s + v%s*iN%s + v%s*iN%s*iN%s;\n" % (o[3], o[4], o[3], o[5], o[4], o[3])
    tx +="        V%s%s%s_%s%s%s = sp_mat(locations.t(), vValues, iN%s*iN%s*iN%s,iN%s*iN%s*iN%s);\n" % (o[0], o[1], o[2], o[3], o[4], o[5], o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        N%s%s%s_%s%s%s = 1;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        return V%s%s%s_%s%s%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="    else{\n"
    tx +="        return V%s%s%s_%s%s%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="}\n\n"
    return tx
    
def return_as_4_2(o):
    #4-2 & 2-4
    tx = "sp_mat flexmat6::%s%s%s%s_%s%s(){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    if(N%s%s%s%s_%s%s == 0){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        locations.set_size(vp.size(), 2);\n"
    tx +="        locations.col(0) = v%s + v%s*iN%s + v%s*iN%s*iN%s + v%s*iN%s*iN%s*iN%s;\n" % (o[0], o[1], o[0], o[2], o[1], o[0], o[3], o[2], o[1], o[0]) #pqrs
    tx +="        locations.col(1) = v%s + v%s*iN%s;\n" % (o[4], o[5], o[4])
    tx +="        V%s%s%s%s_%s%s = sp_mat(locations.t(), vValues, iN%s*iN%s*iN%s*iN%s,iN%s*iN%s);\n" % (o[0], o[1], o[2], o[3], o[4], o[5], o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        N%s%s%s%s_%s%s = 1;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        return V%s%s%s%s_%s%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="    else{\n"
    tx +="        return V%s%s%s%s_%s%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="}\n\n"

    tx +="sp_mat flexmat6::%s%s_%s%s%s%s(){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    if(N%s%s_%s%s%s%s == 0){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        locations.set_size(vp.size(), 2);\n"
    tx +="        locations.col(1) = v%s + v%s*iN%s + v%s*iN%s*iN%s + v%s*iN%s*iN%s*iN%s;\n" % (o[2], o[3], o[2], o[4], o[3], o[2], o[5], o[4], o[3], o[2]) #pqrs
    tx +="        locations.col(0) = v%s + v%s*iN%s;\n" % (o[0], o[1], o[0])
    tx +="        V%s%s_%s%s%s%s = sp_mat(locations.t(), vValues, iN%s*iN%s*iN%s*iN%s,iN%s*iN%s);\n" % (o[0], o[1], o[2], o[3], o[4], o[5], o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        N%s%s_%s%s%s%s = 1;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        return V%s%s_%s%s%s%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="    else{\n"
    tx +="        return V%s%s_%s%s%s%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="}\n\n"
    return tx

#def return_as_1_5(o):


def return_as_5_1(o):
    #5-1 & 1-5
    tx = "sp_mat flexmat6::%s%s%s%s%s_%s(){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    if(N%s%s%s%s%s_%s == 0){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        locations.set_size(vp.size(), 2);\n"
    tx +="        locations.col(0) = v%s + v%s*iN%s + v%s*iN%s*iN%s + v%s*iN%s*iN%s*iN%s + v%s*iN%s*iN%s*iN%s*iN%s;\n" % (o[0], o[1], o[0], o[2], o[1], o[0], o[3], o[2], o[1], o[0], o[4], o[3], o[2], o[1], o[0]) #pqrs
    tx +="        locations.col(1) = v%s;\n" % (o[5])
    tx +="        V%s%s%s%s%s_%s = sp_mat(locations.t(), vValues, iN%s*iN%s*iN%s*iN%s*iN%s,iN%s);\n" % (o[0], o[1], o[2], o[3], o[4], o[5], o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        N%s%s%s%s%s_%s = 1;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        return V%s%s%s%s%s_%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="    else{\n"
    tx +="        return V%s%s%s%s%s_%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="}\n\n"
    
    tx +="sp_mat flexmat6::%s_%s%s%s%s%s(){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    if(N%s_%s%s%s%s%s == 0){\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        locations.set_size(vp.size(), 2);\n"
    tx +="        locations.col(1) = v%s + v%s*iN%s + v%s*iN%s*iN%s + v%s*iN%s*iN%s*iN%s + v%s*iN%s*iN%s*iN%s*iN%s;\n" % (o[1], o[2], o[1], o[3], o[2], o[1], o[4], o[3], o[2], o[1], o[5], o[4], o[3], o[2], o[1]) #pqrs
    tx +="        locations.col(0) = v%s;\n" % (o[0])
    tx +="        V%s_%s%s%s%s%s = sp_mat(locations.t(), vValues, iN%s,iN%s*iN%s*iN%s*iN%s*iN%s);\n" % (o[0], o[1], o[2], o[3], o[4], o[5], o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        N%s_%s%s%s%s%s = 1;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="        return V%s_%s%s%s%s%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="    else{\n"
    tx +="        return V%s_%s%s%s%s%s;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    }\n"
    tx +="}\n\n"
    return tx


    
def return_as_header(o):
    tx = "\n"
    tx +="    sp_mat V%s%s%s_%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    sp_mat V%s%s%s%s_%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    sp_mat V%s%s_%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    sp_mat V%s_%s%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    sp_mat V%s%s%s%s%s_%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])

    tx +="    int N%s%s%s_%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    int N%s%s%s%s_%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    int N%s%s_%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    int N%s_%s%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    int N%s%s%s%s%s_%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="\n"
    return tx

def return_as_header_3_3(o):
    tx = "\n"
    tx +="    sp_mat V%s%s%s_%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    sp_mat V%s%s%s%s_%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    sp_mat V%s%s_%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    sp_mat V%s_%s%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    sp_mat V%s%s%s%s%s_%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])

    tx +="    int N%s%s%s_%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    int N%s%s%s%s_%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    int N%s%s_%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    int N%s_%s%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    int N%s%s%s%s%s_%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="\n"
    return tx

def return_as_header_5_1(o):
    tx = "\n"
    #tx +="    sp_mat V%s%s%s_%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    sp_mat V%s%s%s%s_%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    sp_mat V%s%s_%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    sp_mat V%s_%s%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    sp_mat V%s%s%s%s%s_%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])

    #tx +="    int N%s%s%s_%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    int N%s%s%s%s_%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    int N%s%s_%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    int N%s_%s%s%s%s%s;\n" % (o[5], o[0], o[1], o[2], o[3], o[4])
    tx +="    int N%s%s%s%s%s_%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="\n"
    return tx

def return_as_header_4_2(o):
    tx = "\n"
    #tx +="    sp_mat V%s%s%s_%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    sp_mat V%s%s%s%s_%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    sp_mat V%s%s_%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    sp_mat V%s_%s%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    sp_mat V%s%s%s%s%s_%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])

    #tx +="    int N%s%s%s_%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    int N%s%s%s%s_%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    int N%s%s_%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    int N%s_%s%s%s%s%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    #tx +="    int N%s%s%s%s%s_%s;\n" % (o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="\n"
    return tx

o = "pqrstu"

#print update_as_3_3(o)

"""

head = ""
string = ""
void_reset = ""

d = permutations(["p","q","r", "s", "t", "u"])
for i in d:
    string += return_as_3_3(i)
    string += return_as_4_2(i)
    string += return_as_5_1(i)
    
    head += return_as_header(i)


d = permutations(["p","q","r", "s", "t", "u"])
for i in d:
    string += update_as_5_1(i[0]+i[1]+i[2]+i[3]+i[4]+i[5])
    string += update_as_4_2(i[0]+i[1]+i[2]+i[3]+i[4]+i[5])
    string += update_as_3_3(i[0]+i[1]+i[2]+i[3]+i[4]+i[5])

    head += hupdate_as_5_1(i[0]+i[1]+i[2]+i[3]+i[4]+i[5])
    head += hupdate_as_4_2(i[0]+i[1]+i[2]+i[3]+i[4]+i[5])
    head += hupdate_as_3_3(i[0]+i[1]+i[2]+i[3]+i[4]+i[5])
    
    void_reset += set_to_zero(i)

"""
def deinit_3_3(o):
    tx = "    N%s%s%s_%s%s%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    return tx

def deinit_4_2(o):
    tx = "    N%s%s_%s%s%s%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx +="    N%s%s%s%s_%s%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    return tx

def deinit_5_1(o):
    tx = "    N%s_%s%s%s%s%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    tx = "    N%s%s%s%s%s_%s = 0;\n" %(o[0], o[1], o[2], o[3], o[4], o[5])
    return tx

def generate_4_2(string, head, deinit,o):
    string += update_as_4_2(o)
    string += return_as_4_2(o)
    head += return_as_header_4_2(o)
    head += hupdate_as_4_2(o)
    deinit += deinit_4_2(o)
    return string, head,deinit


def generate_5_1(string, head, deinit,o):
    string += update_as_5_1(o)
    string += return_as_5_1(o)
    head += return_as_header_5_1(o)
    head += hupdate_as_5_1(o)
    deinit += deinit_5_1(o)
    return string, head, deinit

def generate_3_3(string, head, deinit, o):
    string += update_as_3_3(o)
    string += return_as_3_3(o)
    head += return_as_header_3_3(o)
    head += hupdate_as_3_3(o)
    deinit += deinit_3_3(o)
    return string, head, deinit

def add2(x):
    x += 2

x = 1
add2(1)
#print "add:", x


"""
string = ""
head = ""

deinit = ""

string, head, deinit = generate_4_2(string, head, deinit, "qtrups")
string, head, deinit = generate_4_2(string, head, deinit, "qtrusp")
string, head, deinit = generate_5_1(string, head, deinit, "pqtrus")
string, head, deinit = generate_5_1(string, head, deinit, "sqtrup")
string, head, deinit = generate_3_3(string, head, deinit, "qrupst")
string, head, deinit = generate_3_3(string, head, deinit, "prustq")

string, head, deinit = generate_3_3(string, head, deinit, "trupqs")
string, head, deinit = generate_3_3(string, head, deinit, "srutpq")

string, head, deinit = generate_4_2(string, head, deinit, "pqrust")

string, head, deinit = generate_4_2(string, head, deinit, "strupq")

string, head, deinit = generate_3_3(string, head, deinit, "psqrtu")
string, head, deinit = generate_3_3(string, head, deinit, "turpqs")
string, head, deinit = generate_3_3(string, head, deinit, "qrupst")

string, head, deinit = generate_4_2(string, head, deinit, "rstupq")
#string, head, deinit = generate_4_2(string, head, deinit, "pqrust")

string, head, deinit = generate_4_2(string, head, deinit, "psqrtu")
string, head, deinit = generate_4_2(string, head, deinit, "qrtups")
string, head, deinit = generate_4_2(string, head, deinit, "stpqru")
string, head, deinit = generate_4_2(string, head, deinit, "qrtusp")

#string, head, deinit = generate_3_3(string, head, deinit, "qrupst")
string, head, deinit = generate_3_3(string, head, deinit, "pqsrtu")

f1 = open("flexmat_6d_reset.h", "w")
f2 = open("flexmat_6d.h", "w")
f3 = open("flexmat_6d.cpp", "w")

f1.write(deinit)
f2.write(head)
f3.write(string)
f1.close()
f2.close()
f3.close()
"""

string = ""
head = ""

void_reset = ""

#string, head, deinit = generate_3_3(string, head, deinit, "pqstur")
print string
print head
print void_reset



"""
  t2t3a.update_as_qtru_ps(t3.qtru_sp()∗vhhpp.qs_pr()∗t2.sq_pr())
  t2t3b.update_as_pqtru_s(t3.pqtru_s()∗vhhpp.q_prs()∗t2.rpq_s())
  t2t3c.update_as_sqtru_p(t3.sqtru_p()∗vhhpp.s_pqr()∗t2.rsp_q())
  t2t3d.update_as_qru_pst(t3.pru_stq()∗vhhpp.pqs_r()∗t2.q_prs())
  t2t3e.update_as_tru_pqs(t3.sru_tpq()∗vhhpp.qrs_p()∗t2.s_pqr())
  t2t3f.update_as_pqru_st(t3.pqru_st()∗vhhpp.pq_rs()∗t2.pq_rs())
  t2t3g.update_as_stru_pq(t3.stru_pq()∗vhhpp.rs_pq()∗t2.rs_pq())
  t2t2b.update_as_psq_rtu(t2.pr_sq()∗vhppp.pr_qs()∗t2.p_qrs())
  t2t2c.update_as_tur_pqs(t2.rs_pq()∗vhppp.rs_pq()∗t2.s_pqr())
  t2t2d.update_as_qru_pst(t2.pq_rs()∗vhhph.pq_rs()∗t2.q_prs())
  t3a.update_as_pq_rstu(vpppp.pq_rs() ∗ t3.pq_rstu()) //Note that this will probably be replaced by a block implementation.
  t3b.update_as_pqru_st(t3.pqrs_tu()∗ vphhp.pq_rs())
  t3c.update_as_ps_qrtu(vphhp.pr_qs() ∗ t3.sp_qrtu())
t2a.update_as_qru_pst(vppph.pqs_r() ∗ t2.q_prs())
t2b.update_as_pqs_rtu(t2.pqr_s() ∗ vhphh.p_qrs() )

"""
    
d = permutations(["p","q","r", "s", "t", "u"])
for i in d:
    string, head, void_reset = generate_3_3(string, head, void_reset, i)


    
f1 = open("flexmat_6d_reset.h", "w")
f2 = open("flexmat_6d.h", "w")
f3 = open("flexmat_6d.cpp", "w")

f1.write(void_reset)
f2.write(head)
f3.write(string)
f1.close()
f2.close()
f3.close()
