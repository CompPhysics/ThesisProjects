from sympy import *
from pylab import *
import numpy as np
import matplotlib.pyplot as plt

#below_fermi = (0,1,2,3)
#above_fermi = (4,5,6,7,8)
#states = [(1,1),(1,-1),(2,1),(2,-1),(3,1),(3,-1),(4,1),(4,-1),(5,1),(5,-1)]
N = 2
NB = 2
g = Symbol('g')

#box potential
def makeStateSpace(N,NB): #N = num of particles, NB = size of basis (number of energy levels)
	states = []
	for n2 in range(0,NB):	#sum over shells
		for nx in range(-n2-1,n2+1):
			for ny in range(-n2-1,n2+1):
				for nz in range(-n2-1,n2+1):
					if (nx**2 + ny**2 + nz**2 == n2):
						states.append((n2,nx,ny,nz,1))
						states.append((n2,nx,ny,nz,-1))
	below_fermi = range(0,N/2)
	above_fermi = range(N/2, NB)
	return tuple(states), tuple(below_fermi), tuple(above_fermi)

states, below_fermi, above_fermi = makeStateSpace(N,NB)
NS = len(states)
#print states

def h0(p,q):
    if p == q:
        n2, nx, ny, nz, s = states[p]
        return (4*pi**2*n2/(2*m*L**2))
    else:
        return 0

def f(p,q):
    if p == q:
        return 0
    s = h0(p,q)
    for i in below_fermi:
        s += assym(p,i,q,i)
        return s

def kd3(V1, V2):
	counter = 0
	for i in range(0,3):
		if V1[i] == V2[i]:
			counter += 1
	return (counter == 3)

#print kd3([1,2,3],[1,2,3])

def assym(p,q,r,s):
    n21, nx1, ny1, nz1, s1 = states[p]
    n22, nx2, ny2, nz2, s2 = states[q]
    n23, nx3, ny3, nz3, s3 = states[r]
    n24, nx4, ny4, nz4, s4 = states[s]
    
    returnVal = 0

    if kd3([nx1 + nx2, ny1 + ny2, nz1 + nz2], [nx3 + nx4, ny3 + ny4, nz3 + nz4]):
		if s1==s3 and s2==s4:
			if not kd3([nx1,ny1,nz1],[nx3,ny3,nz3]):
				returnVal += 1/((nx3-nx1)**2 + (ny3-ny1)**2 + (nz3-nz1)**2)
		if s1==s4 and s2==s3:
			if not kd3([nx1,ny1,nz1],[nx4,ny4,nz4]):
				returnVal -= 1/((nx4-nx1)**2 + (ny4-ny1)**2 + (nz4-nz1)**2)
	
    return returnVal
#print assym(1,2,1,2)
def makeIntMatrix(N,NB):
	intMat = np.zeros((NS,NS,NS,NS))	#array
	for p in range(0,NS):
		for q in range(0,NS):
			for r in range(0,NS):
				for s in range(0,NS):
				intMat[p][q][r][s] = assym(p,q,r,s)
	return intMat

#before I learned I should just store a 4D matrix
#	intMat = np.zeros(NS**4).reshape(NS**2, NS**2)
#	indices = []
#	for p in range(0,NS):
#		for q in range(0,NS):
#			indices.append([p,q])	#this is pointless, might as well use einsum with 4d tensors
#	#print indices
#	counter1 = 0
#	counter2 = 0
#	for h1 in indices:
#		for h2 in indices:
#			p, q = h1
#			r, s = h2
#			intMat[counter1][counter2] = assym(p,q,r,s)
#			counter2 = counter2 + 1
#		counter2 = 0
#		counter1 = counter1 + 1
	return intMat

V = makeIntMatrix(N,NB)
print V

def eps(holes, particles):
    E = 0
    for h in holes:
        p, s = states[h]
        E += (p-1)
    for p in particles:
        p, s = states[p]
        E -= (p-1)
    return E

#Want to do these calculations with einsum?
#This is problem 8.10 (pairing interaction) in lnb.pdf, pdf page 299. See 8.7.1, pdf page 269, for comments
#We want ewald potential for HEG, eq. 2.14 in Audun's task, page 89

eps = 1e-10
conFac = 1
while conFac > eps:
	TMat = np.zeros(NS**4).reshape(NS**2, NS**2)

	#first two diagrams on page 71 are written in sums
	for c in range(N,NS):
		

	for k in range(0,N):


# Diagram 1
s1 = 0
for a in above_fermi:
    for b in above_fermi:
        for i in below_fermi:
            for j in below_fermi:
                s1 += 0.25*assym(a,b,i,j)*assym(i,j,a,b)/eps((i,j),(a,b))


# Diagram 3
s3 = 0
for a in above_fermi:
   for b in above_fermi:
       for c in above_fermi:
           for i in below_fermi:
               for j in below_fermi:
                   for k in below_fermi:
                       s3 += assym(i,j,a,b)*assym(a,c,j,k)*assym(b,k,c,i)/eps((i,j),(a,b))/eps((k,j),(a,c))

# Diagram 4
s4 = 0
for a in above_fermi:
    for b in above_fermi:
        for c in above_fermi:
            for d in above_fermi:
                for i in below_fermi:
                    for j in below_fermi:
                        s4 += 0.125*assym(i,j,a,b)*assym(a,b,c,d)*assym(c,d,i,j)/eps((i,j),(a,b))/eps((i,j),(c,d))

# Diagram 5
s5 = 0
for a in above_fermi:
    for b in above_fermi:
        for i in below_fermi:
            for j in below_fermi:
                for k in below_fermi:
                    for l in below_fermi:
                        s5 += 0.125*assym(i,j,a,b)*assym(k,l,i,j)*assym(a,b,k,l)/eps((i,j),(a,b))/eps((k,l),(a,b))

# Diagram 8 
s8 = 0
for a in above_fermi:
    for b in above_fermi:
        for i in below_fermi:
            for j in below_fermi:
                for k in below_fermi:
                    s8 -= 0.5*assym(i,j,a,b)*assym(a,b,i,k)*f(k,j)/eps((i,j),(a,b))/eps((i,k),(a,b))

# Diagram 9 
s9 = 0
for a in above_fermi:
    for b in above_fermi:
        for c in above_fermi:
            for i in below_fermi:
                for j in below_fermi:
                    s9 += 0.5*assym(i,j,a,b)*assym(a,c,i,j)*f(b,c)/eps((i,j),(a,b))/eps((i,j),(a,c))

s_5 =  -0.0291521990740741*g**4
s14 =  -0.0308883101851853*g**4
s34 =   0.0163049768518519*g**4
s36 =  -0.0145760995370371*g**4
s38 =  -0.0201099537037037*g**4
s39 =   0.0176938657407407*g**4


ga = linspace(-1,1,5)
e1 = []
corrCCD = [-0.21895, -0.06306, 0.0, -0.08336, -0.36956]
corr4 = []

for g_val in ga:
    H1 = matrix([[2-g_val , -g_val/2.,  -g_val/2., -g_val/2., -g_val/2.,     0],
                 [-g_val/2.,   4-g_val,  -g_val/2., -g_val/2.,    0., -g_val/2.],
                 [-g_val/2., -g_val/2.,    6-g_val,     0, -g_val/2., -g_val/2.],
                 [-g_val/2., -g_val/2.,      0,   6-g_val, -g_val/2., -g_val/2.],
                 [-g_val/2.,     0,  -g_val/2., -g_val/2.,   8-g_val, -g_val/2.],
                 [0    , -g_val/2.,  -g_val/2., -g_val/2., -g_val/2.,  10-g_val]])

    u1, v1 = linalg.eig(H1)
    e1.append(min(u1))
    corr4.append((s1+s4+s5+2*s_5+2*s14+2*s34+2*s36+s38+2*s39).subs(g,g_val))

exact = e1 - (2-ga)

plt.axis([-1,1,-0.5,0.05])
plt.xlabel(r'Interaction strength, $g$', fontsize=16)
plt.ylabel(r'Correlation energy', fontsize=16)
exact = plt.plot(ga, exact,'b-*',linewidth = 2.0, label = 'Exact')
mbpt4 = plt.plot(ga, corr4,'r:.', linewidth = 2.0, label = 'MBPT4')
ccd = plt.plot(ga, corrCCD, 'm:v',linewidth = 2.0, label = 'CCD')
plt.legend()
plt.savefig('CCDMBPT4theory.pdf', format='pdf')
plt.show()


