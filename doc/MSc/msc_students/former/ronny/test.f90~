
SUBROUTINE gauleg(x1,x2,x,w,n)
	IMPLICIT NONE

	INTEGER :: i, j, m, n
	DOUBLE PRECISION :: eps, x1, x2, x, w 
	DIMENSION :: x(n), w(n) 
	PARAMETER (eps=3.D-14)
	DOUBLE PRECISION :: p1,p2,p3,pp,xl,xm,z,z1

	m  = (n + 1) / 2
	xm = 0.5d0 * (x2 + x1)
	xl = 0.5d0 * (x2 - x1)

	DO i = 1, m
		z1 = 0.
		z  = COS(3.141592654d0 * (i - .25d0) / (n + .5d0))

			DO WHILE(ABS(z - z1) > EPS)
				p1 = 1.
				p2 = 0.

				DO j = 1, n
				   p3 = p2
				   p2 = p1
				   p1 = ((2. * j - 1.) * z * p2 - (j - 1.) * p3) / j
				ENDDO 

				pp = n * (z * p1 - p2) / (z * z - 1.)
				z1 = z
				z  = z - p1 / pp
			ENDDO

		x(i)		 = xm-xl*z
		x(n + 1 - i) = xm+xl*z
		w(i)		 = 2.* xl / ((1. - z * z) * (pp**2))
		w(n + 1 - i) = w(i)
	ENDDO
END SUBROUTINE gauleg


SUBROUTINE rel_mesh(x, w, n)
	IMPLICIT NONE

	INTEGER :: i, n
	DOUBLE PRECISION :: c, pi_over_4,cb, hbarc, nuc_mass, x, w
	DIMENSION :: x(n), w(n)

	PARAMETER(c			= 0.75)

	pi_over_4 = ACOS(-1.) / 4.
	hbarc	  = (3.151 *(10**(-26))) / (1.602*(10**(-19))) ! eV
	nuc_mass  = (1.6606*(10**(-27))) / (1.602*(10**(-19))) ! eV / m^2 (c^2?)

	! Estimate integrals
	CALL gauleg(-1.D0, 1.d0, x, w, n)

	! Transform mesh-points & weights
	DO i=1,n
		x(i) = TAN(pi_over_4 * (x(i) + 1.)) * c
		w(i) = (pi_over_4 * c) / (COS(pi_over_4 * (x(i) + 1.))**2) * w(i)
	ENDDO


END SUBROUTINE rel_mesh









PROGRAM	prog


  IMPLICIT NONE
  INTEGER :: n
  DOUBLE PRECISION :: x(100), w(100)
  double precision :: sum

  n =100
  call rel_mesh(x,w,n)
  sum = 0.
  do i=1,n
     sum = sum + (x(i)**3)*w(i)/(exp(-x(i)) -1) 
  enddo
  write(*,*) 'int = ', sum, ' exact =', (acos(-1.)**4)/15.
END PROGRAM prog

