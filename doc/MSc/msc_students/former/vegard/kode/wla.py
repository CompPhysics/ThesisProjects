# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.37
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_wla', [dirname(__file__)])
            _mod = imp.load_module('_wla', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _wla = swig_import_helper()
    del swig_import_helper
else:
    import _wla
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class dwt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dwt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dwt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wla.new_dwt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wla.delete_dwt
    __del__ = lambda self : None;
    def partial_transform(self, *args): return _wla.dwt_partial_transform(self, *args)
    def mra(self, *args): return _wla.dwt_mra(self, *args)
    def wavevar(self, *args): return _wla.dwt_wavevar(self, *args)
    def edof(self, *args): return _wla.dwt_edof(self, *args)
    def shift(self, *args): return _wla.dwt_shift(self, *args)
    def get_boundaries(self, *args): return _wla.dwt_get_boundaries(self, *args)
dwt_swigregister = _wla.dwt_swigregister
dwt_swigregister(dwt)

def get_nu(*args):
  return _wla.get_nu(*args)
get_nu = _wla.get_nu

def get_daub(*args):
  return _wla.get_daub(*args)
get_daub = _wla.get_daub

def get_la(*args):
  return _wla.get_la(*args)
get_la = _wla.get_la

def get_bl(*args):
  return _wla.get_bl(*args)
get_bl = _wla.get_bl

def get_coiflet(*args):
  return _wla.get_coiflet(*args)
get_coiflet = _wla.get_coiflet

class modwt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, modwt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, modwt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wla.new_modwt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wla.delete_modwt
    __del__ = lambda self : None;
    def partial_transform(self, *args): return _wla.modwt_partial_transform(self, *args)
    def mra(self, *args): return _wla.modwt_mra(self, *args)
    def wavevar(self, *args): return _wla.modwt_wavevar(self, *args)
    def edof(self, *args): return _wla.modwt_edof(self, *args)
    def shift(self, *args): return _wla.modwt_shift(self, *args)
    def get_boundaries(self, *args): return _wla.modwt_get_boundaries(self, *args)
modwt_swigregister = _wla.modwt_swigregister
modwt_swigregister(modwt)

class toolbox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, toolbox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, toolbox, name)
    __repr__ = _swig_repr
    def ahurst(self, *args): return _wla.toolbox_ahurst(self, *args)
    def ihurst(self, *args): return _wla.toolbox_ihurst(self, *args)
    def shurst(self, *args): return _wla.toolbox_shurst(self, *args)
    def mra(self, *args): return _wla.toolbox_mra(self, *args)
    def wa(self, *args): return _wla.toolbox_wa(self, *args)
    def __init__(self): 
        this = _wla.new_toolbox()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wla.delete_toolbox
    __del__ = lambda self : None;
toolbox_swigregister = _wla.toolbox_swigregister
toolbox_swigregister(toolbox)



